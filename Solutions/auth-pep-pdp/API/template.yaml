AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Create the unicorn service api
Parameters:
  ApplicationName:
    Type: String
    Description: Name of owning application
  UserManagementStackName:
    Type: String
    Description: The name of the stack that contains the user management part, e.g the Cognito UserPool
  PDPStackName:
    Type: String
    Description: The name of the stack that contains the PDP service

Globals:
  Function:
    Timeout: 5
    MemorySize: 1024
    Runtime: python3.12

Resources:
  UnicornDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ApplicationName}-unicorn-data
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      Tags:
        - Key: Data
          Value: Unicorn

  RaceDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ApplicationName}-race-data
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      Tags:
        - Key: Data
          Value: Races

  LambdaRider:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: Lambda/Rider/
      Environment:
        Variables:
          UNICORN_TABLE_NAME: !Ref UnicornDataTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UnicornDataTable
      Events:
        GetRider:
          Type: Api
          Properties:
            Path: /rider
            Method: GET
            RestApiId:
              Ref: UnicornsApi
        ListRiders:
          Type: Api
          Properties:
            Path: /riders
            Method: GET
            RestApiId:
              Ref: UnicornsApi

  LambdaTrainer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: Lambda/Trainer/
      Environment:
        Variables:
          UNICORN_TABLE_NAME: !Ref UnicornDataTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UnicornDataTable
      Events:
        GetTrainer:
          Type: Api
          Properties:
            Path: /trainer
            Method: GET
            RestApiId:
              Ref: UnicornsApi
        ListTrainers:
          Type: Api
          Properties:
            Path: /trainers
            Method: GET
            RestApiId:
              Ref: UnicornsApi

  LambdaUnicorn:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: Lambda/Unicorn/
      Environment:
        Variables:
          UNICORN_TABLE_NAME: !Ref UnicornDataTable
          RACE_TABLE_NAME: !Ref RaceDataTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UnicornDataTable
        - DynamoDBReadPolicy:
            TableName: !Ref RaceDataTable
      Events:
        GetUnicorn:
          Type: Api
          Properties:
            Path: /unicorn
            Method: GET
            RestApiId:
              Ref: UnicornsApi
        ListUnicorns:
          Type: Api
          Properties:
            Path: /unicorns
            Method: GET
            RestApiId:
              Ref: UnicornsApi

  LambdaRace:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: Lambda/Race/
      Environment:
        Variables:
          RACE_TABLE_NAME: !Ref RaceDataTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref RaceDataTable
      Events:
        ListRaces:
          Type: Api
          Properties:
            Path: /races
            Method: GET
            RestApiId:
              Ref: UnicornsApi
        GetRace:
          Type: Api
          Properties:
            Path: /race
            Method: GET
            RestApiId:
              Ref: UnicornsApi
        GetRaceResults:
          Type: Api
          Properties:
            Path: /race/results
            Method: GET
            RestApiId:
              Ref: UnicornsApi

  UnicornsApi:
    Type: AWS::Serverless::Api
    Properties:
      Description: API for managing Unicorn resources
      Name: !Sub ${ApplicationName}-unicorns-api
      StageName: prod
      OpenApiVersion: '3.0.1'
      AlwaysDeploy: true
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'GET,PUT,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          LambdaRequestAuthorizer:
            FunctionArn: !GetAtt LambdaApiAuthorizer.Arn
            FunctionPayloadType: REQUEST
            Identity: 
              Headers: 
                - Authorization
              ReauthorizeEvery: 0
        DefaultAuthorizer: LambdaRequestAuthorizer

  LambdaApiAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Lambda/Authorizer/
      Handler: auth.handler
      Policies:
        - LambdaInvokePolicy:
            FunctionName: 
              Fn::ImportValue: !Sub ${PDPStackName}:pdp-lambda-name
      Environment:
        Variables:
          JWKS_URL:
            Fn::ImportValue: !Sub ${UserManagementStackName}:jwks-url
          AUDIENCE:
            Fn::ImportValue: !Sub ${UserManagementStackName}:app-audience
          PDP_AUTHZ_ENDPOINT: 
            Fn::ImportValue: !Sub ${PDPStackName}:pdp-lambda-name

Outputs:
  ApiEndpoint:
    Description: The endpoint URL of the API
    Value: !Sub "https://${UnicornsApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: !Sub "${AWS::StackName}:api-endpoint"
  ApiId:
    Description: The ID of the API
    Value: !Ref UnicornsApi
    Export:
      Name: !Sub "${AWS::StackName}:api-id"
  UnicornDataTableName:
    Description: Name of the Unicorn Data DynamoDB table
    Value: !Ref UnicornDataTable
    Export:
      Name: !Sub "${AWS::StackName}:unicorn-data-table"
  RaceDataTableName:
    Description: Name of the Race Data DynamoDB table
    Value: !Ref RaceDataTable
    Export:
      Name: !Sub "${AWS::StackName}:race-data-table"
